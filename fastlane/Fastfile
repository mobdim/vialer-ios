# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
opt_out_usage

# If you want to automatically update fastlane if a new version is available:
update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.53.0"

# Set Deliver to use DAV to prevent "Unable to find content provider for username" failure
ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

default_platform :ios

platform :ios do
  before_all do
  end

  lane :prebuild do
    clear_derived_data
    cocoapods
  end

  desc "Deploy to iTunes Connect"
  lane :upload_beta do
    prebuild
    match_appstore
    #scan
    gym(
        output_directory: "./fastlane/Brands/" + ENV["BRAND_FOLDER"] + "/builds",
        scheme: ENV["BETA_SCHEME"],
        configuration: 'Release',
    )

    pilot(
        username: ENV["ITC_USERNAME"],
        team_name: ENV["APP_TEAM"],
        skip_submission: true,
        skip_waiting_for_build_processing: true,
    )
    

    slack(
        message: sh("git describe --abbrev=0") +" uploaded to ITC",
    )
  end

  desc "Create Screenshots"
  lane :screenshot do
    prebuild
    snapshot(
        stop_after_first_error: true,
        output_directory: "./fastlane/Brands/" + ENV["BRAND_FOLDER"] + "/screenshots"
    )
  end

  desc "Upload Screenshots"
  lane :upload_screenshots do
    screenshot
    deliver(
      skip_metadata: true
    )
  end

  desc "Match Development"
  lane :match_development do
    match(
      type: 'development',
    )
  end

  desc "Match Adhoc"
  lane :match_adhoc do
    match(
      type: 'adhoc',
    )
  end

  desc "Match Appstore"
  lane :match_appstore do
    match(
      type: 'appstore',
    )
  end

  # You can define as many lanes as you want
  after_all do |lane|
    clean_build_artifacts()
  end

  error do |lane, exception|
    #slack(
    #    message: exception.message,
    #    success: false,
    #    )
  end

  lane :add_device do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(
        username: ENV["ITC_USERNAME"],
        team_name: ENV["APP_TEAM"],
        devices: device_hash
    )
    refresh_profiles
  end

  # A helper lane for refreshing provisioning profiles.
  lane :refresh_profiles do
    match(
      username: ENV["ITC_USERNAME"],
      team_name: ENV["APP_TEAM"],
      force_for_new_devices: true
    )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
